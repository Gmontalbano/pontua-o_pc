import streamlit as st
from datetime import datetime
import pandas as pd
import sqlite3

from utils.hashes import make_hashes


def cadastro_reuniao(c, conn):
    st.subheader("Cadastro de Reuni√£o")
    nome = st.text_input("Nome da Reuni√£o")
    data = st.date_input("Data", value=datetime.today())
    if st.button("Cadastrar Reuni√£o"):
        c.execute("INSERT INTO reunioes (Nome, Data) VALUES (?, ?)", (nome, data))
        conn.commit()
        st.success("Reuni√£o cadastrada com sucesso!")


def delete_reuniao(cursor, conn):
    st.subheader("üìÖ Gerenciar Reuni√µes")

    # Buscar reuni√µes existentes
    reunioes = cursor.execute("SELECT ID, Nome, Data FROM reunioes").fetchall()

    if reunioes:
        reuniao_selecionada = st.selectbox(
            "Selecione a reuni√£o:",
            reunioes,
            format_func=lambda x: f"{x[1]} ({x[2]}) - ID {x[0]}"
        )

        # Campos para edi√ß√£o
        novo_nome = st.text_input("Novo Nome", reuniao_selecionada[1])
        nova_data = st.date_input("Nova Data", pd.to_datetime(reuniao_selecionada[2]))

        col1, col2 = st.columns(2)

        # Bot√£o para salvar altera√ß√µes
        if col1.button("üíæ Salvar Altera√ß√µes"):
            cursor.execute("UPDATE reunioes SET Nome = ?, Data = ? WHERE ID = ?",
                           (novo_nome, nova_data, reuniao_selecionada[0]))
            conn.commit()
            st.success(f"‚úÖ Reuni√£o '{novo_nome}' atualizada com sucesso!")
            st.rerun()

        # Bot√£o para excluir reuni√£o
        if col2.button("‚ùå Excluir Reuni√£o"):
            cursor.execute("DELETE FROM reunioes WHERE ID = ?", (reuniao_selecionada[0],))
            conn.commit()
            st.warning(f"‚ö†Ô∏è Reuni√£o '{reuniao_selecionada[1]}' foi exclu√≠da!")
            st.rerun()

    else:
        st.info("üìå Nenhuma reuni√£o encontrada.")

def cadastro_unidade(c, conn):
    st.subheader("Cadastro de Unidade")
    nome = st.text_input("Nome da Unidade")
    if st.button("Cadastrar Unidade"):
        c.execute("INSERT INTO unidades (Nome) VALUES (?)", (nome,))
        conn.commit()
        st.success("Unidade cadastrada com sucesso!")


def cadastro_membro(c, conn):
    st.subheader("Cadastro de Membro")

    # Buscar unidades com ID e Nome
    unidades = pd.read_sql("SELECT ID, Nome FROM unidades", conn)

    nome = st.text_input("Nome do Membro")
    unidade_nome = st.selectbox("Unidade", unidades['Nome'].tolist() if not unidades.empty else [], key='unidade_nome')
    codigo_sgc = st.text_input("C√≥digo SGC")  # Novo campo para inserir o c√≥digo SGC

    if st.button("Cadastrar Membro"):
        if unidade_nome and codigo_sgc:
            # Pegar o ID da unidade correspondente ao nome selecionado
            unidade_id = int(unidades[unidades['Nome'] == unidade_nome]['ID'].values[0])

            # Inserir o membro no banco
            c.execute("INSERT INTO membros (Nome, id_unidade, codigo_sgc) VALUES (?, ?, ?)",
                      (nome, unidade_id, codigo_sgc))
            conn.commit()

            st.success(f"Membro '{nome}' cadastrado com sucesso com c√≥digo SGC {codigo_sgc}!")
            st.rerun()  # Atualiza a tela para mostrar o novo membro
        else:
            st.warning("‚ö†Ô∏è Preencha todos os campos corretamente.")



def delete_membro(cursor, conn):
    # Buscar membros com nome da unidade e codigo_sgc
    membros = pd.read_sql("""
        SELECT membros.ID, membros.Nome, membros.codigo_sgc, unidades.Nome as Unidade 
        FROM membros 
        JOIN unidades ON membros.id_unidade = unidades.ID
    """, conn)

    if not membros.empty:
        membro_dict = {f"{row['Nome']} ({row['Unidade']})": row["ID"] for _, row in membros.iterrows()}
        membro_selecionado = st.selectbox("Selecione o membro:", list(membro_dict.keys()))

        membro_id = membro_dict[membro_selecionado]
        membro_info = membros[membros["ID"] == membro_id].iloc[0]

        # Campos de edi√ß√£o
        novo_nome = st.text_input("Nome", membro_info["Nome"])
        novo_codigo_sgc = st.text_input("C√≥digo SGC", membro_info["codigo_sgc"])  # Adicionado para edi√ß√£o do c√≥digo
        unidades = membros['Unidade'].unique()
        indice_unidade = list(unidades).index(membro_info['Unidade'])

        nova_unidade = st.selectbox("Unidade", unidades, index=indice_unidade)

        b1, b2 = st.columns(2)

        # **Salvar Altera√ß√µes**
        if b1.button("üíæ Salvar Altera√ß√µes", key='Alterar'):
            nova_unidade_id = int(pd.read_sql(
                f"SELECT ID FROM unidades WHERE Nome = ?", conn, params=[nova_unidade]
            )['ID'].values[0])

            cursor.execute("UPDATE membros SET Nome = ?, codigo_sgc = ?, id_unidade = ? WHERE ID = ?",
                           (novo_nome, novo_codigo_sgc, nova_unidade_id, membro_id))
            conn.commit()
            st.success(f"‚úÖ Membro '{novo_nome}' atualizado com sucesso!")
            st.rerun()

        # **Excluir Membro**
        if b2.button("‚ùå Excluir Membro", key='Deletar'):
            cursor.execute("DELETE FROM membros WHERE ID = ?", (membro_id,))
            conn.commit()
            st.warning(f"‚ö†Ô∏è Membro '{membro_info['Nome']}' foi exclu√≠do!")
            st.rerun()

    else:
        st.warning("üìå Nenhum membro encontrado para editar ou excluir.")


def gerenciar_usuarios(c, conn):
    st.subheader("üìå Gerenciar Usu√°rios")

    # Buscar membros dispon√≠veis (Nome e codigo_sgc)
    membros = pd.read_sql("SELECT Nome, codigo_sgc FROM membros", conn)

    if membros.empty:
        st.warning("‚ö†Ô∏è Nenhum membro encontrado. Cadastre um membro antes de criar um usu√°rio.")
        return  # Interrompe a execu√ß√£o se n√£o houver membros

    # Criar lista formatada para exibir nome + c√≥digo SGC
    membros["Display"] = membros["codigo_sgc"] + " - " + membros["Nome"]

    # Sele√ß√£o do membro pelo c√≥digo SGC
    membro_selecionado = st.selectbox("Selecione o Membro", membros["Display"], index=0)

    # Obter o c√≥digo SGC real do membro selecionado
    codigo_sgc = membros.loc[membros["Display"] == membro_selecionado, "codigo_sgc"].values[0]

    # Verificar se o usu√°rio j√° existe na tabela `usuarios`
    usuario_existente = pd.read_sql("SELECT id, login, permissao FROM usuarios WHERE codigo_sgc = ?", conn, params=[codigo_sgc])

    col1, col2 = st.columns(2)  # Criar duas colunas para organizar os bot√µes

    if not usuario_existente.empty:
        st.warning("‚ö†Ô∏è Este membro j√° tem um usu√°rio cadastrado. Voc√™ pode editar ou excluir abaixo.")

        usuario_id = usuario_existente["id"].values[0]
        login = st.text_input("Login", usuario_existente["login"].values[0])
        senha = st.text_input("Senha (Deixe em branco para manter a atual)", type="password")
        permissao = st.selectbox("Permiss√£o", ["equipe", "associado", "conselho"],
                                 index=["equipe", "associado", "conselho"].index(usuario_existente["permissao"].values[0]))

        if col1.button("üíæ Salvar Altera√ß√µes", key=f"salvar_{usuario_id}"):
            if senha:  # Se uma nova senha foi inserida, atualiza com hash
                senha_hash = make_hashes(senha)
                c.execute("UPDATE usuarios SET login = ?, senha = ?, permissao = ? WHERE id = ?",
                          (login, senha_hash, permissao, usuario_id))
            else:  # Mant√©m a senha atual
                c.execute("UPDATE usuarios SET login = ?, permissao = ? WHERE id = ?",
                          (login, permissao, usuario_id))

            conn.commit()
            st.success(f"‚úÖ Usu√°rio atualizado com sucesso!")
            st.rerun()

        if col2.button("‚ùå Excluir Usu√°rio", key=f"excluir_{usuario_id}"):
            c.execute("DELETE FROM usuarios WHERE id = ?", (usuario_id,))
            conn.commit()
            st.warning(f"‚ö†Ô∏è Usu√°rio foi exclu√≠do!")
            st.rerun()

    else:  # Se o usu√°rio n√£o existir, exibe os campos para cadastro
        st.subheader("‚úÖ Cadastrar Novo Usu√°rio")
        login = st.text_input("Login")
        senha = st.text_input("Senha", type="password")
        permissao = st.selectbox("Permiss√£o", ["equipe", "associado", "conselho"])

        if st.button("Cadastrar Usu√°rio", key="cadastrar_usuario"):
            if codigo_sgc and login and senha:
                try:
                    senha_hash = make_hashes(senha)
                    c.execute("INSERT INTO usuarios (codigo_sgc, login, senha, permissao) VALUES (?, ?, ?, ?)",
                              (codigo_sgc, login, senha_hash, permissao))
                    conn.commit()
                    st.success(f"‚úÖ Usu√°rio cadastrado com sucesso para o membro {membro_selecionado}!")

                except sqlite3.IntegrityError:
                    st.error("‚ùå Este login j√° est√° cadastrado. Escolha outro.")

                except sqlite3.Error as e:
                    st.error(f"‚ùå Erro do banco de dados: {str(e)}")

                except Exception as e:
                    st.error(f"‚ùå Erro inesperado: {str(e)}")

            else:
                st.warning("‚ö†Ô∏è Preencha todos os campos!")
